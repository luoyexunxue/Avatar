#define PHI (sqrt(5.)*0.5 + 0.5)
#define PI 3.14159265

#define t iGlobalTime

#define EXO_SPIKE 1.

float interval = 9.0 - mod(iGlobalTime*3.0, 9.0);
float intervalPhase = 9.0 - mod(iGlobalTime*3.0+4.5, 9.0);

vec2 rot2D(vec2 p, float angle) {

    angle = radians(angle);
    float s = sin(angle);
    float c = cos(angle);
    
    return p * mat2(c,s,-s,c);
    
}
        
    

float fOpIntersectionRound(float a, float b, float r) {
	float m = max(a, b);
	if ((-a < r) && (-b < r)) {
		return max(m, -(r - sqrt((r+a)*(r+a) + (r+b)*(r+b))));
	} else {
		return m;
	}
}

// Cone with correct distances to tip and base circle. Y is up, 0 is in the middle of the base.
float fCone(vec3 p, float radius, float height) {
	vec2 q = vec2(length(p.xz), p.y);
	vec2 tip = q - vec2(0, height);
	vec2 mantleDir = normalize(vec2(height, radius));
	float mantle = dot(tip, mantleDir);
	float d = max(mantle, -q.y);
	float projected = dot(tip, vec2(mantleDir.y, -mantleDir.x));
	
	// distance to tip
	if ((q.y > height) && (projected < 0.)) {
		d = max(d, length(tip));
	}
	
	// distance to base ring
	if ((q.x > radius) && (projected > length(vec2(height, radius)))) {
		d = max(d, length(q - vec2(radius, 0)));
	}
	return d;
}

// Reflect space at a plane
float pReflect(inout vec3 p, vec3 planeNormal, float offset) {
	float t = dot(p, planeNormal)+offset;
	if (t < 0.) {
		p = p - (2.*t)*planeNormal;
	}
	return sign(t);
}

// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.
// Read like this: R(p.xz, a) rotates "x towards z".
// This is fast if <a> is a compile-time constant and slower (but still practical) if not.
void pR(inout vec2 p, float a) {
	p = cos(a)*p + sin(a)*vec2(p.y, -p.x);
}

// The "Round" variant uses a quarter-circle to join the two objects smoothly:
float fOpUnionRound(float a, float b, float r) {
	float m = min(a, b);
	if ((a < r) && (b < r) ) {
		return min(m, r - sqrt((r-a)*(r-a) + (r-b)*(r-b)));
	} else {
	 return m;
	}
}

// Repeat around the origin by a fixed angle.
// For easier use, num of repetitions is use to specify the angle.
float pModPolar(inout vec2 p, float repetitions) {
	float angle = 2.*PI/repetitions;
	float a = atan(p.y, p.x) + angle/2.;
	float r = length(p);
	float c = floor(a/angle);
	a = mod(a,angle) - angle/2.;
	p = vec2(cos(a), sin(a))*r;
	// For an odd number of repetitions, fix cell index of the cell in -x direction
	// (cell index would be e.g. -5 and 5 in the two halves of the cell):
	if (abs(c) >= (repetitions/2.)) c = abs(c);
	return c;
}


vec3 pModDodecahedron(inout vec3 p) {
    vec3 v1 = normalize(vec3(0., PHI, 1.));
    vec3 v2 = normalize(vec3(PHI, 1., 0.));

    float sides = 5.;
    float dihedral = acos(dot(v1, v2));
    float halfDdihedral = dihedral / 2.;
    float faceAngle = 2. * PI / sides;
    
    p.z = abs(p.z);
    
    pR(p.xz, -halfDdihedral);
    pR(p.xy, faceAngle / 4.);
    
   	p.x = -abs(p.x);
    
    pR(p.zy, halfDdihedral);
    p.y = -abs(p.y);
    pR(p.zy, -halfDdihedral);

    pR(p.xy, faceAngle);
    
    pR(p.zy, halfDdihedral);
    p.y = -abs(p.y);
    pR(p.zy, -halfDdihedral);

    pR(p.xy, faceAngle);
    
    pR(p.zy, halfDdihedral);
    p.y = -abs(p.y);
    pR(p.zy, -halfDdihedral);

    pR(p.xy, faceAngle);
    
    pR(p.zy, halfDdihedral);
   	p.y = -abs(p.y);
    pR(p.zy, -halfDdihedral);

    p.z = -p.z;
	pModPolar(p.yx, sides);
    pReflect(p, vec3(-1, 0, 0), 0.);
    
    return p;
}

vec3 pModIcosahedron(inout vec3 p) {

    vec3 v1 = normalize(vec3(1, 1, 1 ));
    vec3 v2 = normalize(vec3(0, 1, PHI+1.));

    float sides = 3.;
    float dihedral = acos(dot(v1, v2));
    float halfDdihedral = dihedral / 2.;
    float faceAngle = 2. * PI / sides;
    

    p.z = abs(p.z);    
    pR(p.yz, halfDdihedral);
    
   	p.x = -abs(p.x);
    
    pR(p.zy, halfDdihedral);
    p.y = -abs(p.y);
    pR(p.zy, -halfDdihedral);

    pR(p.xy, faceAngle);
    
    pR(p.zy, halfDdihedral);
    p.y = -abs(p.y);
    pR(p.zy, -halfDdihedral);

    pR(p.xy, faceAngle);
     
    pR(p.zy, halfDdihedral);
    p.y = -abs(p.y);
    pR(p.zy, -halfDdihedral);

    pR(p.xy, faceAngle);
  
    pR(p.zy, halfDdihedral);
   	p.y = -abs(p.y);
    pR(p.zy, -halfDdihedral);

    p.z = -p.z;
	pModPolar(p.yx, sides);
    pReflect(p, vec3(-1, 0, 0), 0.);

	return p;
}

float spikeModel(vec3 p, float spikeLen) {
    pR(p.zy, PI/2.);
    return fCone(p, 0.25, spikeLen);
}

float spikesModel(vec3 p, float spikeLen) {
    float f_smooth = 0.6;
    
    pModDodecahedron(p);
    
    vec3 v1 = normalize(vec3(0., PHI, 1.));
    vec3 v2 = normalize(vec3(PHI, 1., 0.));

    float sides = 5.;
    float dihedral = acos(dot(v1, v2));
    float halfDdihedral = dihedral / 2.;
    float faceAngle = 2. * PI / sides;
    
    float spikeA = spikeModel(p, spikeLen);
    
    pR(p.zy, -dihedral);

    float spikeB = spikeModel(p, spikeLen);

    pR(p.xy, -faceAngle);
    pR(p.zy, dihedral);
    
    float spikeC = spikeModel(p, spikeLen);
    
    return fOpUnionRound(
        spikeC,
        fOpUnionRound(
            spikeA,
            spikeB,
            f_smooth
       	),
        f_smooth
   	);
}


float exoHolesModel(vec3 p, float dist) {
    float len = 3.;
    pModDodecahedron(p);
    p.z += dist;
    return length(p) - 2.2;
}

float coreModel(vec3 p, float interval) {
    float outerInterval = min(interval*1.02,2.5);
    outerInterval = interval > 6.5 ? 0.0001 : outerInterval;
    float outer = length(p) - outerInterval;
    
    float thickness = 0.28;
    float inner = outer + thickness;
    
    float spikeLength = 1.0 + interval;
    float spikeLFinish = interval > 7.2 ? 1.0 : 3.0 - interval/3.0;
    spikeLength = interval > 3.0 ? spikeLFinish : spikeLength;
	float spikes = spikesModel(p, spikeLength);
    outer = fOpUnionRound(outer, spikes, 0.4);
    
    float shell = max(-inner, outer);

    float dist = 6.0 - interval/2.0;
    dist = interval > 6.5 ? 6.0 : dist;
    float holes = exoHolesModel(p, dist);
	shell = fOpIntersectionRound(-holes, shell, thickness/2.0);

	return shell;
}



// Based on Template 3D by iq: https://www.shadertoy.com/view/ldfSWs

float doModel(vec3 p) {
    p.y -= 2.5;
       
    p.xz = rot2D(p.xz, interval * 180.0 / 9.0);
    
    float core = coreModel(p, interval);
    float core2 = coreModel(p, intervalPhase);
    return min(core, core2);
	//return core;
}

void doCamera(out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse) {
    
    float an = 10.0 * mouse.x + PI / 2.;
    //an = 10.;

    //float d = 2. + sin(an) * 1.6;
    float d = 2. + (1. - mouse.y) * 10.;
    camPos = vec3(
        sin(an),
        sin(mouse.y * PI / 2.),
        cos(an)
    ) * d;

   	camTar = vec3(0);
}



vec3 doMaterial(in vec3 pos, in vec3 nor) {
    return vec3(0.85, 0.85, 0.9);
}


float doRulerModel(vec3 p) {
    return 1000.0;
    float t = 0.1;
    return abs(p.y) - mod(t/5., 1.);
}

float rule(float d, float scale) {
    return mix(1., .35, smoothstep(.6, 1., abs(fract(d * scale) * 2. - 1.)));
}

vec3 rulerColor(float t) {
    t = clamp(log(t+1.0), 0.0, 1.0);
    return mix(mix(vec3(0.,.1,1.), vec3(1.,.1,0.), t*5.), vec3(1.0), smoothstep(.2,.5,t));
}

vec3 doRulerMaterial(vec3 p, float d, float t) {
    float lt = log(t) / log(10.0);
    float s = pow(10.0, -floor(lt));
    float m = smoothstep(0.0, 0.33, fract(lt));
    float r = rule(d, s * 10.) * mix(rule(d, s * 100.0), rule(d, s), m);
    return mix(rulerColor(s * d), rulerColor(s * d * 0.1), m) * 0.8 * r;
}

float doCombinedModels(vec3 p) {
    return min(doModel(p), doRulerModel(p));
}

float calcSoftshadow(in vec3 ro, in vec3 rd);

vec3 doLighting(in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal) {
    vec3 lin = vec3(0.0);

    // key light
    //-----------------------------
    //vec3 lig = normalize(vec3(1.1, 0.7, 0.9));
    vec3 lig = normalize(vec3(0.0,1.0,0.8)); 
    float dif = max(dot(nor, lig), 0.0);
    float sha = 0.0;
    if (dif > 0.01) sha = calcSoftshadow(pos + 0.01 * nor, lig);
    lin += dif * vec3(2.) * sha;

    // ambient light
    //-----------------------------
    //lin += vec3(0.5);

    // surface-light interacion
    //-----------------------------
    vec3 col = mal * lin;

    // fog
    //-----------------------------
    //col *= exp(-0.01 * dis * dis);

    //Specular
    float nrm = (60.0 + 8.0) / (3.1415 * 8.0);
    col += pow(max(dot(reflect(rd,nor),lig),0.0),60.0) * nrm;
 
//////experiment
    
    float fresnel = 1.0 - max(dot(nor,rd),0.0);
    fresnel = pow(fresnel,3.0) * 0.65;
    
    //sky color
	vec3 e = reflect(rd,nor);
    
    e.y = max(e.y,0.0);
    vec3 ret;
    ret.x = pow(1.0-e.y,2.0);
    ret.y = 1.0-e.y;
    ret.z = 0.6+(1.0-e.y)*0.4;
    //Reflected
    vec3 reflected = ret*0.1;

    //color
    vec3 base = vec3(0.01,0.01,0.01);
    vec3 scolor = vec3(0.01,0.01,0.01);

    float diffuse = pow(dot(nor,lig) * 0.4 + 0.6,80.0)*200.0;
  	
    //Refracted
    vec3 refracted = base + diffuse * scolor * 0.32 * lin + col*1.4; 
    
	//Experiment - overwrite color
	col = mix(refracted,reflected,fresnel);    
    
    //col = vec3(reflected);
    
    
    return col;
}

vec3 calcIntersection(in vec3 ro, in vec3 rd) {
    const float maxd = 10.0;    // max trace distance
    const float precis = 0.00001; // precission of the intersection
    vec3 p;
    float h = precis * 2.0;
    float d, r;
    float t = 0.0;
    float res = -1.0;
    for (int i = 0; i < 70; i++) // max number of raymarching iterations is 90
    {
        if (h < precis || t > maxd) break;
        p = ro + rd * t;
        r = doRulerModel(p);
        d = doModel(p);
        h = min(d, r);
        t += h;
    }

    if (t < maxd) res = t;
    return vec3(res, r < d ? 1.0 : 0.0, d);
}

vec3 calcNormal(in vec3 pos) {
    const float eps = 0.002; // precision of the normal computation

    const vec3 v1 = vec3(1.0, -1.0, -1.0);
    const vec3 v2 = vec3(-1.0, -1.0, 1.0);
    const vec3 v3 = vec3(-1.0, 1.0, -1.0);
    const vec3 v4 = vec3(1.0, 1.0, 1.0);

    return normalize(v1 * doCombinedModels(pos + v1 * eps) + 
                     v2 * doCombinedModels(pos + v2 * eps) +
                     v3 * doCombinedModels(pos + v3 * eps) + 
                     v4 * doCombinedModels(pos + v4 * eps));
}

float calcSoftshadow(in vec3 ro, in vec3 rd) {
    float res = 1.0;
    float t = 0.5; // selfintersection avoidance distance
    float h = 1.0;
    for (int i = 0; i < 40; i++) { // 40 is the max numnber of raymarching steps
        h = doModel(ro + rd * t);
        res = min(res, 4.0 * h / t); // 64 is the hardness of the shadows
        t += clamp(h, 0.01, 2.0);     // limit the max and min stepping distances
    }
    return clamp(res, 0.0, 1.0);
}

mat3 calcLookAtMatrix(in vec3 ro, in vec3 ta, in float roll) {
    vec3 ww = normalize(ta - ro);
    vec3 uu = normalize(cross(ww, vec3(sin(roll), cos(roll), 0.0)));
    vec3 vv = normalize(cross(uu, ww));
    return mat3(uu, vv, ww);
}

// math
mat3 fromEuler(vec3 ang) {
	vec2 a1 = vec2(sin(ang.x),cos(ang.x));
    vec2 a2 = vec2(sin(ang.y),cos(ang.y));
    vec2 a3 = vec2(sin(ang.z),cos(ang.z));
    mat3 m;
    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);
	m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);
	m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);
	return m;
}

          float circle(in vec2 _st, in float _radius, float gradient){
              vec2 dist = _st-vec2(0.5);
            return 1.-smoothstep(_radius-(_radius*gradient),
                                   _radius+(_radius*gradient),
                                   dot(dist,dist)*4.0);
          }

          vec3 radialGradient(vec2 st, float radius, float gradientWidth, vec3 innerColor, vec3 outerColor) {
              float circleMix = circle(st,radius, gradientWidth);
            return mix(outerColor, innerColor, circleMix);
          }

// main
void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
	vec2 uv = fragCoord.xy / iResolution.xy;
    vec2 realUv = uv;
    uv = uv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;    
    float time = iGlobalTime * 0.3;
        
    // ray
    //vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);   
    vec3 ang = vec3(0.0, 0.3, 0.0);
    vec3 ori = vec3(0.0,4.5, 7.0);
    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.15;
    dir = normalize(dir) * fromEuler(ang);

    //
 
    vec3 color = radialGradient(realUv, 0.3, 3.5,vec3(1.0, 0.97, 0.95), vec3(0.5, 0.49, 0.475));

    vec3 t = calcIntersection(ori, dir);
    if (t.x > -0.5) {
        // geometry
        vec3 pos = ori + t.x * dir;
        vec3 nor = calcNormal(pos);

        // materials
        vec3 mal;
        if (t.y > 0.) {
            mal = doRulerMaterial(pos, t.z, t.x);
        	//mal = doLighting(pos, nor, rd, t.x, mal);
        } else {
            mal = doMaterial(pos, nor);
        }
        
        color = doLighting(pos, nor, dir, t.x, mal);
    }
        
    // post
	fragColor = vec4(pow(color,vec3(0.75)), 1.0);
}